vue中事件event为mouseEvent,
event.target事件被挂载到当前元素
event.currentTarget
父传给子是个属性
子传给父是个事件
自定义事件
可以任意组件之间进行通信
绑定事件(mounted)
event.$on
触发事件
event.$emit
解绑事件(beforeDestroy())
event.$off

生命周期
created和mounted的区别
created是把vue实例初始化了，保存在内存里并没有渲染
mounted是已经渲染完了，这时候通常做一些dom操作
beforeDestroy做的事情：解除绑定，销毁子组件以及事件监听器（定时器，domcument,）
带有父子组件的生命周期
创建从父到子
渲染从子到父
更新前从父到子
更新完从子到父
销毁前从父到子
销毁后从子到父
在vue中拿到dom元素使用ref，通过this.$refs.拿到
nextTick的作用：在下次dom更新循环结束后执行延迟回调，当我们修改数据之后立即使用nextTick()来获取最新更新的Dom
插槽就是父组件向子组件传递一些东西
作用域插槽就是在子组件中定义的data，父组件可以访问到，使用template v-slot
具名插槽就是定义多个插槽在一个组件中，需要有
不同的名字
动态组件
:is
需要根据数据，动态渲染的场景，组件不确定
异步组件
import()函数
按需加载，异步加载大组件，什么时候用就会加载，不用就不加载
（）=》{impoort 。。。}
缓存组件,频繁切换，不需要重复渲染，比如tab切换
keep-alive对子组件进行缓存，不会被销毁，与v-show不同的是它是基于vue框架的js对象来控制，v-show是基于css来实现的

mixin
多个组件有相同逻辑，抽离出来
并不是完美的解决办法，会有一些问题
1.变量来源不明确，不利于阅读
2.多个mixin可能会命名冲突
3.mixin和组件出现多对多关系，复杂度高
vue3提出的Composition API在解决这些问题

传统组件只是静态渲染，更新还要依赖于操作dom
数据驱动视图：不用操作dom，通过数据来操作视图

Vue响应式的核心API为Object.defineProperty
缺点是
1.深度监听，需要递归到底，一次性计算量大
2.无法监听新增属性，和删除属性（vue.set和vue.delete）
3.

vdom 用js模拟DOM结构，计算出最小的变更，操作dom

diff算法
时间复杂度优化为o（n）
只比较同一层级，不跨级比较
tag不相同，则直接删除重建，不再深度比较
tag和key，两者都相同，认为是相同节点，不再深度比较



vue组件是如何渲染和更新
初次渲染
解析模板为render函数
触发响应式，监听data属性的getter和setter，模板没用到的数据不会触发getter
执行render函数，生成vnode，执行patch，将vnode渲染到dom

更新过程
修改data，触发setter（此前在getter中已被监听）
重新执行render函数，生成newVnode
执行patch，根据diff算法将newVnode和vnode做对比更新vnode

render函数执行触发某个数据的getter时收集依赖给观察者
修改了某个数据触发setter通知给观察者
之后重新触发re-render重新生成render函数

异步渲染
$nextTick()等待dom渲染完成，回调
作用：汇总data的修改，一次性更新视图
减少dom操作次数，提高性能



组件设计思路
1.从功能上拆分
2.尽量让组件原子化
3.容器组件（只管数据）和UI组件（只显示视图）


状态设计思路
1.用数据描述所有内容
2.数据要结构化，易于程序操作（便于遍历等）
3.数据要可扩展以便增加功能